#!/usr/bin/env bash

filename=bash_prompt
echo "$(date +"%Y%m%d %H:%M:%S");$$;$(tty);Loading $filename" >> ~/.bash_log


# set 256 color profile where possible
if [[ $COLORTERM == gnome-* && $TERM == xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        #   printf "%s" "$1$branchName$s"
        echo -e "${1}${branchName}${blue}${s}";
    else
        return
    fi
}



set_prompts() {


    local hostStyle=""
    local userStyle=""

    local cloud=""


    # build the prompt

    # if on a VM
    cloud=""
    if grep -q "^flags.* hypervisor" /proc/cpuinfo >&/dev/null ; then
        cloud="☁️ "
    fi

    # logged in as root
    if [[ "${USER}" == "root" ]]; then
        userStyle="${red}";
    else
        userStyle="${orange}";
    fi

    # connected via ssh
    if [[ "${SSH_TTY}" ]]; then
        hostStyle="${bold}${red}";
    else
        hostStyle="${yellow}";
    fi;

    # Set the terminal title to the current working directory.
    PS1="\[\033]0;\w\007\]";
    PS1+="\[${bold}\]\n"; # newline
    PS1+="\[${userStyle}\]\u"; # username
    PS1+="\[${white}\] @ ";
    PS1+="\[${hostStyle}\]${cloud}\h"; # host
    PS1+="[\$(ip.getmylocation country)]"
    PS1+="\[${white}\] in ";
    PS1+="\[${green}\]\w"; # working directory
    PS1+="\$(prompt_git \"${white} on ${violet}\")"; # Git repository details
    PS1+="\n";
    PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
    export PS1;

    PS2="\[${yellow}\]→ \[${reset}\]";
    export PS2;
}

set_prompts
unset set_prompts
